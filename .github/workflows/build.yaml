name: Build Custom Koha deb

on:
  push:
    branches:
      - apt
jobs:
  build:
    name: Build Custom Docker DEB
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build deb package
      env:
        DOCKERHUB_USERNAME: cmosh
        CI_COMMIT_TAG: "19.11.02"
        KOHA_FORK: cmosh
      run: |
        source docker-compose/docker-compose.env
        if [[ "${CI_COMMIT_TAG}" != "${KOHA_RELEASE}" ]]; then echo "SKIPPED building debian files - uneven tags"; exit 0; fi
        docker-compose -f docker-compose/common.yml -f docker-compose/patched.yml rm -fv koha_patched
        docker-compose -f docker-compose/common.yml -f docker-compose/patched.yml build koha_patched
        docker-compose -f docker-compose/common.yml -f docker-compose/patched.yml up -d --force-recreate --no-deps koha_patched
        docker-compose -f docker-compose/common.yml -f docker-compose/patched.yml logs -f --no-color koha_patched
        cp -r ./koha-patched/debian .apt/incoming
    - uses: actions/upload-artifact@v1
      with:
        name: apt
        path: .apt
  package_deb:
    name: Package custom docker deb
    needs: build
    runs-on: ubuntu-latest
    container:
      image: cmosh/aptly
    steps:
    - name: Download Built Koha Packages
      uses: actions/download-artifact@v1
      with:
        name: apt
        path: /tmp
    - name: Setup tmate session
      uses: cmosh/action-tmate@v2
    - name: Copy koha-patched to apt folder
      run: |
        ls /tmp

        # ls /tmp
        # gpg --import /tmp/apt/gpg.asc
        # aptly publish drop buster || true
        # aptly snapshot drop koha-patched || true
        # aptly repo create -distribution=buster -component=main cmoshkoha || true
        # aptly repo add -force-replace cmoshkoha /tmp/apt/incoming
        # aptly snapshot create -architectures=amd64 koha-patched from repo cmoshkoha
        # aptly publish snapshot -architectures=i386,amd64 -skip-signing=true koha-patched
        # ls /github/home/.aptly/public
  #   - name: Push .deb package
  #     uses: maxheld83/ghpages@v0.2.1
  #     env:
  #       BUILD_DIR: .apt/
  #       GH_PAT: ${{ secrets.GH_PAT }}
  # deploy:
  #   name: Build Koha Image
  #   needs: package_deb
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build docker image
  #     run: |
  #       export KOHAPATH=$GITHUB_WORKSPACE
  #       source docker-compose/docker-compose.env
  #       docker-compose -f docker-compose/ci.yml rm -fv koha_ci || true
  #       docker-compose -f docker-compose/ci.yml build koha_ci
  #       docker-compose -f docker-compose/ci.yml up -d --force-recreate --no-deps koha_ci
  #       docker exec -i koha_ci ./wait_until_ready.py
  #       docker-compose -f docker-compose/ci.yml stop koha_ci || true
  #       docker-compose -f docker-compose/ci.yml rm -fv koha_ci || true
  #       docker-compose -f docker-compose/ci.yml logs --no-color koha_ci
